using OtpNet;

namespace TFACGUI.BlazorWebApp.Models;

/// <summary>
/// TFACGUI entry.
/// </summary>
public class TotpConfig
{
    /// <summary>
    /// The name that the user gives this <see cref="TotpConfig"/> entry.
    /// </summary>
    public string Name { get; set; } = string.Empty;

    /// <summary>
    /// User-definable color to associate with this <see cref="TotpConfig"/> entry.
    /// </summary>
    public string Color { get; set; } = string.Empty;
    
    /// <summary>
    /// The label that was encoded into the <c>otpauth://totp/</c> URI (typically, this also describes the <see cref="TotpConfig"/>, just like the user-definable <see cref="Name"/>).<para> </para>
    /// The label is used to identify which account a key is associated with.
    /// </summary>
    public string Label { get; set; } = string.Empty;
    
    /// <summary>
    /// The issuer parameter is a string value indicating the provider or service this account is associated with, URL-encoded according to RFC 3986.
    /// </summary>
    public string Issuer { get; set; } = string.Empty;

    /// <summary>
    /// How many digits the 2FA tokens generated by this <see cref="TotpConfig"/> have. By default this is <c>6</c>.
    /// </summary>
    public int Digits { get; set; } = 6;

    /// <summary>
    /// The period parameter defines a period that a TOTP code will be valid for, in seconds. The default value is <c>30</c>.
    /// </summary>
    public int Period { get; set; } = 30;

    /// <summary>
    /// TOTP hashing algo (default is SHA-1).
    /// </summary>
    public OtpHashMode Algorithm { get; set; } = OtpHashMode.Sha1;
    
    /// <summary>
    /// Base32-encoded 2FA secret.
    /// </summary>
    public string TotpSecretKey { get; set; } = string.Empty;
}