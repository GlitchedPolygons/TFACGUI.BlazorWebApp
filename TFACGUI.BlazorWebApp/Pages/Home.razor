@page "/"

@inject IJSRuntime JS
@inject IUserDataService UserDataService

@using ReactorBlazorQRCodeScanner
@using TFACGUI.BlazorWebApp.Models
@using TFACGUI.BlazorWebApp.Services
@using GlitchedPolygons.ExtensionMethods
@using OtpNet
@using System.Net
@using System.Web
@using System.Collections.Specialized
@using TFACGUI.BlazorWebApp.Extensions

<PageTitle>
    TFACGUI
</PageTitle>

<h1 class="hide-on-mobile">
    TFACGUI
</h1>

<div class="btn-flex homepage-mainbuttons mb-3">

    @if (scanning)
    {
        <button type="button"
                class="btn btn-danger stretch-when-narrow"
                @onclick="OnClickCancelScan">
            Cancel scan
        </button>
    }
    else
    {
        <button type="button"
                disabled="@startScanButtonThrottle"
                class="btn btn-success stretch-when-narrow"
                @onclick="OnClickScanTotpSecret">
            Scan QR
        </button>
    }

    <button type="button"
            class="btn btn-success stretch-when-narrow"
            data-bs-toggle="modal"
            data-bs-target="#@Constants.ElementIds.REGISTER_TOTP_SECRET_MODAL"
            @onclick="ResetManualRegistrationModalForm">
        Enter manually
    </button>

    @if (!userData.IsEmpty)
    {
        <span class="hide-on-narrow-screens unselectable bi bi-clickable bi-themeable @(gridView ? "bi-list-task" : "bi-grid-3x2")"
              aria-hidden="true"
              title="Click here to switch between grid view and list view"
              style="width: 2rem; height: 2rem; cursor: pointer; top: 4.20px; margin-left: -4px;"
              @onclick="OnClickToggleGridView">
        </span>
    }

</div>

<div class="qr-scanner @(scanning ? string.Empty : "qr-scanner-height-correction")">

    <QRCodeScanner LoadingMessage=""
                   OutputMessage="No QR code detected"
                   Width="@qrCodeScannerWidth" />

</div>

<div class="input-group mb-3"
     style="align-items: baseline;">

    <input type="text"
           id="@Constants.ElementIds.SEARCH_FIELD"
           @oninput="OnChangeSearchFieldValue"
           class="form-control search-bar stretch-when-narrow"
           placeholder="Search"
           aria-label="Search"
           aria-describedby="@Constants.ElementIds.CLEAR_SEARCH_FIELD_BUTTON">

    <button class="btn btn-danger"
            type="button"
            @onclick="OnClickClearSearchField"
            id="@Constants.ElementIds.CLEAR_SEARCH_FIELD_BUTTON">
        Clear
    </button>

</div>

<div class="@(gridView ? "btn-flex" : string.Empty)"
     style="margin: 0">

    @if (userData.IsEmpty)
    {
        <p>
            <br />
            @if (search.NullOrEmpty())
            {
                <i>
                    This is your TFACGUI chain.<br /><br />
                    Your 2FA tokens will be displayed here, ready to be copied to your system's clipboard.<br /><br />
                    Get started now by adding a new 2FA secret to your chain with one of the two registration methods above! Cheers, stay safe and I hope you like this software :)
                </i>
            }
            else
            {
                <span>
                    No results 😔
                </span>
            }
        </p>
    }

    @foreach
    (
        TotpConfig totpConfig in
        // Search field implementation:
        string.IsNullOrEmpty(search)
            ? userData.Chain
            : userData.Chain.Where(totpConfig => totpConfig.Name.ToLowerInvariant().Contains(search) || totpConfig.Label.ToLowerInvariant().Contains(search))
    )
    {
        <div class="card stretch-when-narrow @(!gridView ? "mb-3" : string.Empty)"
             style="filter: brightness(@totpConfig.CardBrightnessAnimationValue); min-width: @(totpConfig.CardMinWidth);">

            <div class="card-body">

                <div class="totp-title-label">

                    <span class="unselectable bi bi-clickable bi-themeable bi-pencil-square"
                          aria-hidden="true"
                          title="Click here to edit this TOTP config entry"
                          style="cursor: pointer; top: 1px;"
                          data-bs-toggle="modal"
                          data-bs-target="#@Constants.ElementIds.EDIT_TOTP_CONFIG_MODAL"
                          @onclick="() => OnClickEditConfig(totpConfig)">
                    </span>

                    <h4 class="unselectable card-title bi-clickable"
                        title="@(totpConfig.Issuer.NotNullNotEmpty() ? $"Issuer: {totpConfig.Issuer}" : string.Empty)"
                        style="cursor: pointer;"
                        @onclick="() => OnClickCopyTOTP(totpConfig)">
                        @totpConfig.Name
                    </h4>

                </div>

                <h6 class="unselectable card-subtitle mb-2">
                    @totpConfig.Label
                </h6>

                <p class="card-text">

                    <code class="totp-code unselectable"
                          id="@totpConfig.Id"
                          style="cursor: pointer;"
                          @onclick="() => OnClickCopyTOTP(totpConfig)">
                        @totpConfig.Totp
                    </code>

                </p>

                <div class="progress">

                    <div class="progress-bar @(totpConfig.RemainingSeconds < 4 ? "bg-danger" : totpConfig.RemainingSeconds < 8 ? "bg-warning" : string.Empty)"
                         role="progressbar"
                         aria-valuemin="0"
                         aria-valuemax="100"
                         aria-valuenow="@totpConfig.RemainingLifetimePercentage"
                         style="width: @(totpConfig.RemainingLifetimePercentage)%; transition-duration: @(totpConfig.RemainingSeconds < 0.25d || totpConfig.RemainingSeconds > ((double)totpConfig.Period - 0.25d) ? "0.00s" : "0.25s");">
                    </div>

                </div>
            </div>
        </div>
    }
</div>

<!-- Manual 2FA registration modal -->
<div class="modal fade"
     id="@Constants.ElementIds.REGISTER_TOTP_SECRET_MODAL"
     aria-labelledby="@Constants.ElementIds.REGISTER_TOTP_SECRET_MODAL_LABEL"
     tabindex="-1"
     aria-hidden="true">

<div class="modal-dialog">

<div class="modal-content">

    <div class="modal-header">

        <h5 class="modal-title"
            id="@Constants.ElementIds.REGISTER_TOTP_SECRET_MODAL_LABEL">
            Manually enter a 2FA secret
        </h5>

        <button type="button"
                class="btn-close"
                data-bs-dismiss="modal"
                aria-label="Close">
        </button>
    </div>

    <div class="modal-body">

        <p>
            Manually add a 2FA secret to your TFACGUI chain by compiling the form below.
            <span style="cursor: help"
                  title="@manualRegistrationDescTooltip"
                  onclick="alert('@manualRegistrationDescTooltip.Replace("\n", "\\n")')">
                ❓
            </span>
        </p>

        <div class="form-group">

            <label for="@Constants.ElementIds.TOTP_CONFIG_ENTRY_NAME"
                   class="form-label mt-2">
                Name
            </label>

            <input type="text"
                   minlength="2"
                   maxlength="32"
                   class="form-control"
                   id="@Constants.ElementIds.TOTP_CONFIG_ENTRY_NAME"
                   placeholder="@Constants.Placeholders.TOTP_CONFIG_ENTRY_NAME_PLACEHOLDER"
                   @oninput="CheckManualRegistrationReady"
                   autocomplete="off">
        </div>

        <div class="form-group">

            <label for="@Constants.ElementIds.TOTP_ISSUER"
                   class="form-label mt-2">
                Issued by
            </label>

            <input type="text"
                   maxlength="1024"
                   class="form-control"
                   id="@Constants.ElementIds.TOTP_ISSUER"
                   placeholder="@Constants.Placeholders.TOTP_ISSUER_PLACEHOLDER"
                   @oninput="CheckManualRegistrationReady"
                   autocomplete="off">
        </div>

        <div class="form-group">

            <label for="@Constants.ElementIds.TOTP_ISSUED_TO"
                   class="form-label mt-2">
                Issued to
            </label>

            <input type="text"
                   maxlength="64"
                   class="form-control"
                   id="@Constants.ElementIds.TOTP_ISSUED_TO"
                   placeholder="@Constants.Placeholders.TOTP_ISSUED_TO_PLACEHOLDER"
                   @oninput="CheckManualRegistrationReady"
                   autocomplete="off">
        </div>

        <div class="form-group">

            <label for="@Constants.ElementIds.TOTP_SECRET"
                   class="form-label mt-2">
                2FA Secret
            </label>

            <input type="password"
                   class="form-control"
                   id="@Constants.ElementIds.TOTP_SECRET"
                   placeholder="@Constants.Placeholders.TOTP_SECRET_PLACEHOLDER"
                   @oninput="CheckManualRegistrationReady"
                   onClick="this.select();"
                   autocomplete="off">
        </div>

        <fieldset class="form-group">

            <label class="form-label mt-2"
                   id="@Constants.ElementIds.TOTP_DIGITS_SLIDER_LABEL"
                   for="@Constants.ElementIds.TOTP_DIGITS_SLIDER">
                Digits: @TotpConfig.Empty.Digits
            </label>

            <input type="range"
                   class="form-range"
                   min="1"
                   max="10"
                   step="1.0"
                   value="@TotpConfig.Empty.Digits"
                   @oninput="OnMoveDigitSlider"
                   id="@Constants.ElementIds.TOTP_DIGITS_SLIDER">
        </fieldset>

        <fieldset class="form-group">

            <label class="form-label mt-2"
                   id="@Constants.ElementIds.TOTP_INTERVAL_SLIDER_LABEL"
                   for="@Constants.ElementIds.TOTP_INTERVAL_SLIDER">
                Interval: @TotpConfig.Empty.Period seconds
            </label>

            <input type="range"
                   class="form-range"
                   min="1"
                   max="60"
                   step="1.0"
                   value="@TotpConfig.Empty.Period"
                   @oninput="OnMoveIntervalSlider"
                   id="@Constants.ElementIds.TOTP_INTERVAL_SLIDER">
        </fieldset>

        <fieldset class="form-group">

            <label class="form-label mt-2">
                Algorithm
            </label>

            <div class="form-check">

                <input class="form-check-input"
                       type="radio"
                       name="@Constants.ElementIds.TOTP_ALGO_RADIO_BOX"
                       id="@Constants.ElementIds.TOTP_ALGO_RADIO_BOX_BUTTON_SHA1"
                       value="@OtpHashMode.Sha1"
                       checked>

                <label class="form-check-label"
                       for="@Constants.ElementIds.TOTP_ALGO_RADIO_BOX_BUTTON_SHA1">
                    SHA-1 (default)
                </label>
            </div>

            <div class="form-check">

                <input class="form-check-input"
                       type="radio"
                       name="@Constants.ElementIds.TOTP_ALGO_RADIO_BOX"
                       id="@Constants.ElementIds.TOTP_ALGO_RADIO_BOX_BUTTON_SHA256"
                       value="@OtpHashMode.Sha256">

                <label class="form-check-label"
                       for="@Constants.ElementIds.TOTP_ALGO_RADIO_BOX_BUTTON_SHA256">
                    SHA-256
                </label>
            </div>

            <div class="form-check">

                <input class="form-check-input"
                       type="radio"
                       name="@Constants.ElementIds.TOTP_ALGO_RADIO_BOX"
                       id="@Constants.ElementIds.TOTP_ALGO_RADIO_BOX_BUTTON_SHA512"
                       value="@OtpHashMode.Sha512">

                <label class="form-check-label"
                       for="@Constants.ElementIds.TOTP_ALGO_RADIO_BOX_BUTTON_SHA512">
                    SHA-512
                </label>
            </div>
        </fieldset>

        <br />

    </div>

    <div class="modal-footer">

        <button type="button"
                class="btn btn-secondary stretch-when-narrow"
                data-bs-dismiss="modal">
            Cancel
        </button>

        <button type="button"
                data-bs-dismiss="modal"
                class="btn btn-success stretch-when-narrow"
                disabled="@(!registrationReady)"
                @onclick="OnClickEnterManually">
            Add
        </button>
    </div>
</div>
</div>
</div>

<!-- 2FA entry edit modal -->
<div class="modal fade"
     id="@Constants.ElementIds.EDIT_TOTP_CONFIG_MODAL"
     aria-labelledby="@Constants.ElementIds.EDIT_TOTP_CONFIG_MODAL_LABEL"
     tabindex="-1"
     aria-hidden="true">

    <div class="modal-dialog">

        <div class="modal-content">

            <div class="modal-header">

                <h5 class="modal-title"
                    id="@Constants.ElementIds.EDIT_TOTP_CONFIG_MODAL_LABEL">
                    Modify TFACGUI chain entry
                </h5>

                <button type="button"
                        class="btn-close"
                        data-bs-dismiss="modal"
                        aria-label="Close">
                </button>
            </div>

            <div class="modal-body">

                <p>
                    You can modify the name and label properties of a TFACGUI chain entry.
                </p>

                <div class="form-group">

                    <label for="@Constants.ElementIds.EDIT_TOTP_CONFIG_ENTRY_NAME"
                           class="form-label mt-2">
                        Name
                    </label>

                    <input type="text"
                           minlength="2"
                           maxlength="32"
                           class="form-control"
                           id="@Constants.ElementIds.EDIT_TOTP_CONFIG_ENTRY_NAME"
                           placeholder="@Constants.Placeholders.TOTP_CONFIG_ENTRY_NAME_PLACEHOLDER"
                           @oninput="CheckEditReady"
                           autocomplete="off">
                </div>

                <div class="form-group">

                    <label for="@Constants.ElementIds.EDIT_TOTP_ISSUER"
                           class="form-label mt-2">
                        Issued by
                    </label>

                    <input type="text"
                           maxlength="1024"
                           class="form-control"
                           id="@Constants.ElementIds.EDIT_TOTP_ISSUER"
                           placeholder="@Constants.Placeholders.TOTP_ISSUER_PLACEHOLDER"
                           @oninput="CheckEditReady"
                           autocomplete="off">
                </div>

                <div class="form-group">

                    <label for="@Constants.ElementIds.EDIT_TOTP_ISSUED_TO"
                           class="form-label mt-2">
                        Issued to
                    </label>

                    <input type="text"
                           maxlength="64"
                           class="form-control"
                           id="@Constants.ElementIds.EDIT_TOTP_ISSUED_TO"
                           placeholder="@Constants.Placeholders.TOTP_ISSUED_TO_PLACEHOLDER"
                           @oninput="CheckEditReady"
                           autocomplete="off">
                </div>

                @if (edit is not null)
                {
                    <div class="edit-modal-readonly-pills">

                        <span class="unselectable badge rounded-pill bg-secondary"
                              title="TOTP hashing algorithm"
                              style="text-transform: uppercase">
                            @edit.Algorithm
                        </span>

                        <span class="unselectable badge rounded-pill bg-secondary"
                              title="Token length">
                            @(edit.Digits) digits
                        </span>

                        <span class="unselectable badge rounded-pill bg-secondary"
                              title="Interval">
                            @(edit.Period) second@(edit.Period >= 2 ? "s" : string.Empty)
                        </span>

                    </div>
                }

                <br />

            </div>

            <div class="modal-footer">

                <button type="button"
                        @onclick="() => edit = null"
                        class="btn btn-secondary stretch-when-narrow"
                        data-bs-dismiss="modal">
                    Cancel
                </button>

                <button type="button"
                        data-bs-dismiss="modal"
                        @onclick="OnClickDelete"
                        class="btn btn-danger stretch-when-narrow">
                    Delete
                </button>

                <button type="button"
                        data-bs-dismiss="modal"
                        class="btn btn-primary stretch-when-narrow"
                        disabled="@(!editReady)"
                        @onclick="OnClickSaveModification">
                    Save
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Entry added successfully toast -->
<div class="toast stretch-when-narrow"
     id="@Constants.ElementIds.REGISTER_TOTP_SUCCESSFUL"
     role="alert"
     aria-live="assertive"
     aria-atomic="true">

    <div class="toast-header">

        <strong class="me-auto">✅ 2FA Secret registered successfully</strong>

        <button type="button"
                class="btn-close ms-2 mb-1"
                data-bs-dismiss="toast"
                aria-label="Close">
            <span aria-hidden="true"></span>
        </button>

    </div>

    <div class="toast-body">
        Your 2FA secret has been added to the TFACGUI chain.
    </div>
</div>

<br />
<br />
<div style="margin-bottom: 24px;"></div>

@code {

    private static bool focused = true;
    private static bool changedFocusedState = false;

    private bool gridView = true;
    private bool scanning = false;
    private bool editReady = false;
    private bool registrationReady = false;
    private bool startScanButtonThrottle = false;

    private TotpConfig? edit = null;
    private QRCodeScannerJsInterop? qrCodeScannerJsInterop;
    private Models.UserData userData = Models.UserData.Empty;

    private string search = string.Empty;
    private string qrCodeScannerWidth = "90%";

    private readonly string manualRegistrationDescTooltip = "Manually registering a 2FA secret is useful for example if your device has no camera to scan the QR code with, or if you want more control over how the entry is going to be labelled inside your TFACGUI chain.\n\nMake sure to enter everything correctly and label everything in an easily recognizable fashion!";

    protected override async Task OnInitializedAsync()
    {
        qrCodeScannerJsInterop = new QRCodeScannerJsInterop(JS);

        userData = await UserDataService.GetUserData();

        gridView = await JS.InvokeAsync<string>(Constants.InteropFunctionNames.GET_LOCALSTORAGE_VALUE, Constants.LocalStorageIds.GRID_VIEW, "true") != "false";

        for (;;)
        {
            if (changedFocusedState)
            {
                changedFocusedState = false;

                if (focused)
                {
                    userData = await UserDataService.GetUserData();
                }
            }

            StateHasChanged();

            await Task.Delay(focused ? 128 : 256);
        }
    }

    [JSInvokable]
    public static void OnChangeVisibilityState(bool hidden)
    {
        if (changedFocusedState)
        {
            return;
        }

        focused = !hidden;

        changedFocusedState = true;
    }

    private async Task ResetManualRegistrationModalForm()
    {
        await JS.InvokeVoidAsync(Constants.InteropFunctionNames.SET_INPUT_VALUE, Constants.ElementIds.TOTP_CONFIG_ENTRY_NAME, string.Empty);
        await JS.InvokeVoidAsync(Constants.InteropFunctionNames.SET_INPUT_VALUE, Constants.ElementIds.TOTP_SECRET, string.Empty);
        await JS.InvokeVoidAsync(Constants.InteropFunctionNames.SET_INPUT_VALUE, Constants.ElementIds.TOTP_ISSUER, string.Empty);
        await JS.InvokeVoidAsync(Constants.InteropFunctionNames.SET_INPUT_VALUE, Constants.ElementIds.TOTP_ISSUED_TO, string.Empty);
        await JS.InvokeVoidAsync(Constants.InteropFunctionNames.SET_INPUT_VALUE, Constants.ElementIds.TOTP_DIGITS_SLIDER, TotpConfig.Empty.Digits);
        await JS.InvokeVoidAsync(Constants.InteropFunctionNames.SET_INPUT_VALUE, Constants.ElementIds.TOTP_INTERVAL_SLIDER, TotpConfig.Empty.Period);
        await JS.InvokeVoidAsync(Constants.InteropFunctionNames.SET_INPUT_VALUE_RADIO_BOX, Constants.ElementIds.TOTP_ALGO_RADIO_BOX, TotpConfig.Empty.Algorithm.ToString());

        await OnMoveDigitSlider(new ChangeEventArgs { Value = TotpConfig.Empty.Digits });
        await OnMoveIntervalSlider(new ChangeEventArgs { Value = TotpConfig.Empty.Period });
    }

    private async Task OnMoveDigitSlider(ChangeEventArgs e)
    {
        string label = $"Digits: {e.Value}{(e.Value is 6 or "6" ? " (default)" : string.Empty)}";

        await JS.InvokeVoidAsync(Constants.InteropFunctionNames.SET_INPUT_VALUE, Constants.ElementIds.TOTP_DIGITS_SLIDER_LABEL, label, true);
    }

    private async Task OnMoveIntervalSlider(ChangeEventArgs e)
    {
        string label = $"Interval: {e.Value} second{(e.Value is 1 or "1" ? string.Empty : "s")}{(e.Value is 30 or "30" ? " (default)" : string.Empty)}";

        await JS.InvokeVoidAsync(Constants.InteropFunctionNames.SET_INPUT_VALUE, Constants.ElementIds.TOTP_INTERVAL_SLIDER_LABEL, label, true);
    }

    private async Task OnClickCopyTOTP(TotpConfig totpConfig)
    {
        await JS.InvokeVoidAsync(Constants.InteropFunctionNames.COPY_TO_CLIPBOARD, totpConfig.TotpRaw);

        await JS.InvokeVoidAsync(Constants.InteropFunctionNames.PRESS_COPY_BUTTON_PORTABLE, totpConfig.Id, "\u2705Copied...", totpConfig.Totp);

        totpConfig.CardBrightnessAnimationValue = 1.5f;

        while (totpConfig.CardBrightnessAnimationValue > 1.0f)
        {
            totpConfig.CardBrightnessAnimationValue -= 0.0275f;

            await Task.Delay(32);

            StateHasChanged();
        }

        totpConfig.CardBrightnessAnimationValue = 1.0f;

        await JS.InvokeVoidAsync(Constants.InteropFunctionNames.BLUT_ACTIVE_ELEMENT);
    }

    private async Task OnClickScanTotpSecret()
    {
        if (qrCodeScannerJsInterop is null || scanning)
        {
            return;
        }

        int w = await JS.InvokeAsync<int>(Constants.InteropFunctionNames.GET_WINDOW_INNER_WIDTH);

        qrCodeScannerWidth = w > 1024 ? "512" : "90%";

        StateHasChanged();

        await qrCodeScannerJsInterop.Init(OnQrCodeScan);

        scanning = true;

        startScanButtonThrottle = true;

        await JS.InvokeVoidAsync(Constants.InteropFunctionNames.BLUT_ACTIVE_ELEMENT);
    }

    private async Task OnClickCancelScan()
    {
        if (qrCodeScannerJsInterop is null || !scanning)
        {
            return;
        }

        await qrCodeScannerJsInterop.StopRecording();

        scanning = false;

        await Task.Delay(1024);

        startScanButtonThrottle = false;

        await JS.InvokeVoidAsync(Constants.InteropFunctionNames.BLUT_ACTIVE_ELEMENT);
    }

    private async Task OnClickEditConfig(TotpConfig config)
    {
        edit = config;

        await JS.InvokeVoidAsync(Constants.InteropFunctionNames.SET_INPUT_VALUE, Constants.ElementIds.EDIT_TOTP_CONFIG_ENTRY_NAME, edit.Name);
        await JS.InvokeVoidAsync(Constants.InteropFunctionNames.SET_INPUT_VALUE, Constants.ElementIds.EDIT_TOTP_ISSUED_TO, edit.IssuedTo);
        await JS.InvokeVoidAsync(Constants.InteropFunctionNames.SET_INPUT_VALUE, Constants.ElementIds.EDIT_TOTP_ISSUER, edit.Issuer);

        await CheckEditReady();
    }

    private void OnQrCodeScan(string qrCodeContent)
    {
        Task.Run(() => OnQrCodeScanAsync(qrCodeContent));
    }

    private async Task OnQrCodeScanAsync(string qrCodeContent)
    {
        bool success = false;

        try
        {
#if DEBUG
            Console.WriteLine($"Scanned QR-Code: \"{qrCodeContent}\"");
#endif

            if (qrCodeContent.NullOrEmpty() || !qrCodeContent.StartsWith(Constants.OTP_AUTH_URI_PREFIX))
            {
                goto exit;
            }

            string[] uriSplit = qrCodeContent[Constants.OTP_AUTH_URI_PREFIX.Length..].Split('?');

            if (uriSplit.NullOrEmpty() || uriSplit.Length != 2)
            {
                goto exit;
            }

            NameValueCollection query = HttpUtility.ParseQueryString(uriSplit[1]);

            string totpSecretKey = query.Get("secret") ?? string.Empty;

            if (totpSecretKey.NullOrEmpty() || !totpSecretKey.IsValidBase32())
            {
                goto exit;
            }

            string totpLabel = WebUtility.UrlDecode(uriSplit[0]);
            string totpName = string.Empty;
            string totpIssuedTo = string.Empty;
            string totpIssuer = query.Get("issuer") ?? string.Empty;
            string totpPeriod = query.Get("period") ?? TotpConfig.Empty.Period.ToString();
            string totpDigits = query.Get("digits") ?? TotpConfig.Empty.Digits.ToString();
            string totpAlgorithm = query.Get("algorithm") ?? TotpConfig.Empty.Algorithm.ToString();

            if (totpLabel.NullOrEmpty())
            {
                totpLabel = Constants.Placeholders.TOTP_DEFAULT_NAME;
            }

            string[] labelSplit = totpLabel.Split(':');

            if (labelSplit.NullOrEmpty())
            {
                labelSplit = [totpLabel];
            }

            if (labelSplit.Length >= 2)
            {
                if (totpIssuer.NullOrEmpty())
                {
                    totpIssuer = labelSplit[0];
                }

                totpName = labelSplit[0];

                totpIssuedTo = labelSplit[1];
            }
            else
            {
                totpName = labelSplit[0];
            }

            success = await AddTotpConfigToChain(totpName, totpSecretKey, totpAlgorithm.ToOtpHashMode(), totpIssuer, totpIssuedTo, totpDigits, totpPeriod);
        }
        catch (Exception e)
        {
#if DEBUG
            Console.WriteLine($"ERROR: Insertion of {nameof(TotpConfig)} entry into the TFACGUI chain failed. Thrown exception: {e.ToString()}");
#endif
            success = false;
        }

        exit:

        if (!success)
        {
            await JS.InvokeVoidAsync(Constants.InteropFunctionNames.ALERT_DIALOG, "ERROR: Invalid QR code format!");
        }

        scanning = false;

        if (qrCodeScannerJsInterop is not null)
        {
            await qrCodeScannerJsInterop.StopRecording();
        }

        await Task.Delay(1024);

        startScanButtonThrottle = false;
    }

    private async Task OnClickEnterManually()
    {
        string totpConfigName = await JS.InvokeAsync<string>(Constants.InteropFunctionNames.GET_INPUT_VALUE, Constants.ElementIds.TOTP_CONFIG_ENTRY_NAME, "(Unnamed)");

        string totpIssuedTo = await JS.InvokeAsync<string>(Constants.InteropFunctionNames.GET_INPUT_VALUE, Constants.ElementIds.TOTP_ISSUED_TO, string.Empty);
        string totpIssuedBy = await JS.InvokeAsync<string>(Constants.InteropFunctionNames.GET_INPUT_VALUE, Constants.ElementIds.TOTP_ISSUER, string.Empty);
        string totpSecret = await JS.InvokeAsync<string>(Constants.InteropFunctionNames.GET_INPUT_VALUE, Constants.ElementIds.TOTP_SECRET, string.Empty);
        string totpDigits = await JS.InvokeAsync<string>(Constants.InteropFunctionNames.GET_INPUT_VALUE, Constants.ElementIds.TOTP_DIGITS_SLIDER, TotpConfig.Empty.Digits);
        string totpPeriod = await JS.InvokeAsync<string>(Constants.InteropFunctionNames.GET_INPUT_VALUE, Constants.ElementIds.TOTP_INTERVAL_SLIDER, TotpConfig.Empty.Period);
        string totpAlgorithm = await JS.InvokeAsync<string>(Constants.InteropFunctionNames.GET_INPUT_VALUE_RADIO_BOX, Constants.ElementIds.TOTP_ALGO_RADIO_BOX, TotpConfig.Empty.Algorithm);

        if (!totpSecret.IsValidBase32())
        {
            await JS.InvokeVoidAsync(Constants.InteropFunctionNames.ALERT_DIALOG, "ERROR: Invalid 2FA secret. Please enter a valid, Base32-encoded 2FA secret!");

            return;
        }

        await AddTotpConfigToChain
        (
            totpConfigName,
            totpSecret,
            totpAlgorithm.ToOtpHashMode(),
            totpIssuedBy,
            totpIssuedTo,
            totpDigits,
            totpPeriod
        );
    }

    private async Task<bool> AddTotpConfigToChain(string name, string totpSecretKey, OtpHashMode algorithm, string issuer, string issuedTo, string digits, string period)
    {
        try
        {
            userData.Chain.Add(new TotpConfig
            {
                Name = name,
                Algorithm = algorithm,
                TotpSecretKey = totpSecretKey.Replace(" ", string.Empty),
                Issuer = issuer.NullOrEmpty() ? string.Empty : issuer,
                IssuedTo = issuedTo.NullOrEmpty() ? string.Empty : issuedTo,
                Digits = int.TryParse(digits, out int totpDigitsInt) ? totpDigitsInt : TotpConfig.Empty.Digits,
                Period = int.TryParse(period, out int totpPeriodInt) ? totpPeriodInt : TotpConfig.Empty.Period,
            });

            await UserDataService.SetUserData(userData);

            await JS.InvokeVoidAsync(Constants.InteropFunctionNames.SHOW_TOAST, Constants.ElementIds.REGISTER_TOTP_SUCCESSFUL);

            StateHasChanged();

            return true;
        }
        catch (Exception e)
        {
#if DEBUG
            Console.WriteLine($"ERROR: Insertion of TOTP config entry into TFACGUI chain failed! Thrown exception: {e.ToString()}");
#endif
            await JS.InvokeVoidAsync(Constants.InteropFunctionNames.ALERT_DIALOG, "ERROR: Insertion of TOTP config entry into TFACGUI chain failed. Please ensure format and parameter validity!");

            return false;
        }
    }

    private async Task OnClickDelete()
    {
        if (edit is null)
        {
            return;
        }

        bool confirmed = await JS.InvokeAsync<bool>(Constants.InteropFunctionNames.CONFIRM_DIALOG, "Are you sure? Confirming this will irreversibly remove this 2FA config entry from your TFACGUI chain. Are you absolutely sure? Have you backed up your secret key? Consider exporting your TFACGUI chain via the export function before proceeding.");

        if (!confirmed)
        {
            return;
        }

        userData.Chain = userData.Chain.Where(t => t.Id != edit.Id).ToList();

        await UserDataService.SetUserData(userData);

        edit = null;

        await JS.InvokeVoidAsync(Constants.InteropFunctionNames.BLUT_ACTIVE_ELEMENT);
    }

    private async Task OnClickSaveModification()
    {
        if (edit is null)
        {
            return;
        }

        string newName = await JS.InvokeAsync<string>(Constants.InteropFunctionNames.GET_INPUT_VALUE, Constants.ElementIds.EDIT_TOTP_CONFIG_ENTRY_NAME, string.Empty);
        string newIssuer = await JS.InvokeAsync<string>(Constants.InteropFunctionNames.GET_INPUT_VALUE, Constants.ElementIds.EDIT_TOTP_ISSUER, string.Empty);
        string newIssuedTo = await JS.InvokeAsync<string>(Constants.InteropFunctionNames.GET_INPUT_VALUE, Constants.ElementIds.EDIT_TOTP_ISSUED_TO, string.Empty);

        if (newName.NullOrEmpty())
        {
            newName = Constants.Placeholders.TOTP_DEFAULT_NAME;
        }

        try
        {
            TotpConfig editedEntry = new()
            {
                Name = newName,
                Issuer = newIssuer,
                IssuedTo = newIssuedTo,
                Digits = edit.Digits,
                Period = edit.Period,
                Algorithm = edit.Algorithm,
                TotpSecretKey = edit.TotpSecretKey,
            };

            int i = userData.Chain.IndexOf(edit);

            userData.Chain = userData.Chain.Where(t => t.Id != edit.Id).ToList();

            userData.Chain.Insert(i, editedEntry);

            await UserDataService.SetUserData(userData);

            edit = null;
        }
        catch (Exception e)
        {
#if DEBUG
            Console.WriteLine($"ERROR: Modification attempt failed! Thrown exception: {e.ToString()}");
#endif

            await JS.InvokeVoidAsync(Constants.InteropFunctionNames.ALERT_DIALOG, "ERROR: Modification attempt failed!");
        }
    }

    private async Task OnClickToggleGridView()
    {
        gridView = !gridView;

        await JS.InvokeVoidAsync(Constants.InteropFunctionNames.SET_LOCALSTORAGE_VALUE, Constants.LocalStorageIds.GRID_VIEW, gridView);

        await JS.InvokeVoidAsync(Constants.InteropFunctionNames.BLUT_ACTIVE_ELEMENT);
    }

    private async Task CheckManualRegistrationReady()
    {
        string totpSecret = await JS.InvokeAsync<string>(Constants.InteropFunctionNames.GET_INPUT_VALUE, Constants.ElementIds.TOTP_SECRET, string.Empty);
        string totpConfigEntryName = await JS.InvokeAsync<string>(Constants.InteropFunctionNames.GET_INPUT_VALUE, Constants.ElementIds.TOTP_CONFIG_ENTRY_NAME, string.Empty);

        registrationReady =
            totpSecret.NotNullNotEmpty()
            &&
            totpConfigEntryName.NotNullNotEmpty();
    }

    private async Task CheckEditReady()
    {
        string totpConfigEntryName = await JS.InvokeAsync<string>(Constants.InteropFunctionNames.GET_INPUT_VALUE, Constants.ElementIds.EDIT_TOTP_CONFIG_ENTRY_NAME, string.Empty);

        editReady = totpConfigEntryName.NotNullNotEmpty();
    }

    private void OnChangeSearchFieldValue(ChangeEventArgs e)
    {
        search = e.Value?.ToString()?.ToLowerInvariant() ?? string.Empty;

        StateHasChanged();
    }

    private async Task OnClickClearSearchField()
    {
        search = string.Empty;

        await JS.InvokeVoidAsync(Constants.InteropFunctionNames.SET_INPUT_VALUE, Constants.ElementIds.SEARCH_FIELD, search);

        OnChangeSearchFieldValue(new ChangeEventArgs { Value = search });

        await Task.Delay(420);
        await JS.InvokeVoidAsync(Constants.InteropFunctionNames.BLUT_ACTIVE_ELEMENT);
    }

}