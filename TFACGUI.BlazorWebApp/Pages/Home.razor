@page "/"

@inject IJSRuntime JS
@inject IUserDataService UserDataService

@using ReactorBlazorQRCodeScanner
@using TFACGUI.BlazorWebApp.Models
@using TFACGUI.BlazorWebApp.Services
@using GlitchedPolygons.ExtensionMethods

<PageTitle>
    TFACGUI
</PageTitle>

<h1>
    TFACGUI
</h1>

<div class="btn-flex mb-3">

    <button class="btn btn-success stretch-when-narrow"
            @onclick="OnClickScanTotpSecret">
        Scan QR
    </button>

    <button class="btn btn-success stretch-when-narrow"
            data-bs-toggle="modal"
            data-bs-target="#registerTotpSecretModal">
        Enter manually
    </button>

</div>

<QRCodeScanner LoadingMessage=""
               OutputMessage="No QR code detected"
               Width="@qrCodeScannerWidth" />

@foreach (TotpConfig totpConfig in userData.Chain)
{
    <div class="card stretch-when-narrow mb-3">

        <div class="card-body">

            <h4 class="card-title">
                @totpConfig.Name
            </h4>

            <h6 class="card-subtitle mb-2" 
                title="Issuer: @totpConfig.Issuer">
                @totpConfig.Label
            </h6>

            <p class="card-text">

                <code class="totp-code">
                    @totpConfig.Totp
                </code>

            </p>

            <div class="progress">

                <div class="progress-bar @(totpConfig.RemainingSeconds < 4 ? "bg-danger" : totpConfig.RemainingSeconds < 8 ? "bg-warning" : string.Empty)"
                     role="progressbar"
                     aria-valuemin="0"
                     aria-valuemax="100"
                     aria-valuenow="@totpConfig.RemainingLifetimePercentage"
                     style="width: @(totpConfig.RemainingLifetimePercentage)%;">
                </div>

            </div>

            <div class="btn-flex"
                 style="margin-bottom: 0">

                <button type="button"
                        id="@totpConfig.Id"
                        @onclick="() => OnClickCopyTOTP(totpConfig)"
                        class="btn btn-primary stretch-when-narrow">
                    Copy
                </button>

                <button type="button"
                        class="btn btn-secondary stretch-when-narrow">
                    Edit
                </button>

            </div>
        </div>
    </div>
}

<!-- Manual 2FA registration modal -->
<div class="modal fade"
     id="registerTotpSecretModal"
     tabindex="-1"
     aria-labelledby="registerTotpSecretModalLabel"
     aria-hidden="true">

    <div class="modal-dialog">

        <div class="modal-content">

            <div class="modal-header">

                <h5 class="modal-title"
                    id="registerTotpSecretModalLabel">
                    Manually enter a 2FA secret
                </h5>

                <button type="button"
                        class="btn-close"
                        data-bs-dismiss="modal"
                        aria-label="Close">
                </button>
            </div>

            <div class="modal-body">

                <p>
                    Manually add a 2FA secret to your TFACGUI chain by compiling the form below.
                    <span style="cursor: help"
                          title="@manualRegistrationDescTooltip"
                          onclick="alert('@manualRegistrationDescTooltip.Replace("\n", "\\n")')">
                        ❓
                    </span>
                </p>

                <div class="form-group">

                    <label for="totpSecret"
                           class="form-label mt-2">
                        2FA Secret
                    </label>

                    <input type="password"
                           class="form-control"
                           id="totpSecret"
                           placeholder="Base32-encoded TOTP secret"
                           @oninput="CheckManualRegistrationReady"
                           onClick="this.select();"
                           autocomplete="off">
                </div>

                <br />

            </div>

            <div class="modal-footer">

                <button type="button"
                        class="btn btn-secondary stretch-when-narrow"
                        data-bs-dismiss="modal">
                    Cancel
                </button>

                <button type="button"
                        class="btn btn-success stretch-when-narrow"
                        disabled="@(!registrationReady)"
                        @onclick="OnClickEnterManually">
                    Add
                </button>
            </div>
        </div>
    </div>
</div>

@code {

    private bool registrationReady = false;

    private QRCodeScannerJsInterop? qrCodeScannerJsInterop;
    private Models.UserData userData = Models.UserData.Empty;

    private readonly string qrCodeScannerWidth = "512";
    private readonly string manualRegistrationDescTooltip = "This is useful for example if your device has no camera to scan the QR code with, or if you want more control over how the entry is going to be labelled inside your TFACGUI chain.\n\nMake sure to enter everything correctly and label everything in an easily recognizable fashion!";

    protected override async Task OnInitializedAsync()
    {
        qrCodeScannerJsInterop = new QRCodeScannerJsInterop(JS);

        userData = await UserDataService.GetUserData();

        for (;;)
        {
            StateHasChanged();
            
            await Task.Delay(256);
        }
    }

    private async Task OnClickCopyTOTP(TotpConfig totpConfig)
    {
        await JS.InvokeVoidAsync(Constants.InteropFunctionNames.COPY_TO_CLIPBOARD, totpConfig.TotpRaw);

        await JS.InvokeVoidAsync(Constants.InteropFunctionNames.PRESS_COPY_BUTTON_PORTABLE, totpConfig.Id);
    }

    private async Task OnClickScanTotpSecret()
    {
        if (qrCodeScannerJsInterop is null)
        {
            return;
        }

        await qrCodeScannerJsInterop.Init(OnQrCodeScan);
    }

    private void OnQrCodeScan(string qrCodeContent)
    {
#if DEBUG
        Console.WriteLine($"Scanned QR-Code: \"{qrCodeContent}\"");
#endif

        // TODO: show dialog here and handle otp auth url!

        qrCodeScannerJsInterop?.StopRecording().GetAwaiter().GetResult();
    }

    private async Task OnClickEnterManually()
    {
        string totpSecret = await JS.InvokeAsync<string>(Constants.InteropFunctionNames.GET_INPUT_VALUE, Constants.ElementIds.TOTP_SECRET, string.Empty);

        userData.Chain.Add(new TotpConfig
        {
            TotpSecretKey = totpSecret,
            Name = "TEST TEST"
        });

        await UserDataService.SetUserData(userData);

        StateHasChanged();
    }

    private async Task CheckManualRegistrationReady()
    {
        string totpSecret = await JS.InvokeAsync<string>(Constants.InteropFunctionNames.GET_INPUT_VALUE, Constants.ElementIds.TOTP_SECRET, string.Empty);

        registrationReady = totpSecret.NotNullNotEmpty(); // TODO: check other fields against validity too! And ensure valid Base32 encoding!
    }
}