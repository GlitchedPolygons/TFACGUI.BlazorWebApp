@page "/"

@inject IJSRuntime JS
@inject IUserDataService UserDataService

@using ReactorBlazorQRCodeScanner
@using TFACGUI.BlazorWebApp.Models
@using TFACGUI.BlazorWebApp.Services
@using GlitchedPolygons.ExtensionMethods
@using OtpNet

<PageTitle>
    TFACGUI
</PageTitle>

<h1 class="hide-on-mobile">
    TFACGUI
</h1>

<div class="btn-flex homepage-mainbuttons mb-3">

    <button class="btn btn-success stretch-when-narrow"
            @onclick="OnClickScanTotpSecret">
        Scan QR
    </button>

    <button class="btn btn-success stretch-when-narrow"
            data-bs-toggle="modal"
            data-bs-target="#registerTotpSecretModal"
            @onclick="ResetManualRegistrationModalForm">
        Enter manually
    </button>

</div>

<QRCodeScanner LoadingMessage=""
               OutputMessage="No QR code detected"
               Width="@qrCodeScannerWidth" />

@foreach (TotpConfig totpConfig in userData.Chain)
{
    <div class="card stretch-when-narrow mb-3">

        <div class="card-body">

            <div class="totp-title-label">

                <span class="unselectable bi bi-clickable bi-themeable bi-pencil-square"
                      aria-hidden="true"
                      title="Click here to edit this TOTP config entry."
                      style="cursor: pointer; top: 1px;"
                      @onclick="() => OnClickEditConfig(totpConfig)">
                </span>

                <h4 class="unselectable card-title bi-clickable"
                    style="cursor: pointer;"
                    title="Issuer: @totpConfig.Issuer"
                    @onclick="() => OnClickCopyTOTP(totpConfig)">
                    @totpConfig.Name
                </h4>

            </div>

            <h6 class="unselectable card-subtitle mb-2">
                @totpConfig.Label
            </h6>

            <p class="card-text">

                <code class="totp-code unselectable"
                      id="@totpConfig.Id"
                      style="cursor: pointer;"
                      @onclick="() => OnClickCopyTOTP(totpConfig)">
                    @totpConfig.Totp
                </code>

            </p>

            <div class="progress">

                <div class="progress-bar @(totpConfig.RemainingSeconds < 4 ? "bg-danger" : totpConfig.RemainingSeconds < 8 ? "bg-warning" : string.Empty)"
                     role="progressbar"
                     aria-valuemin="0"
                     aria-valuemax="100"
                     aria-valuenow="@totpConfig.RemainingLifetimePercentage"
                     style="width: @(totpConfig.RemainingLifetimePercentage)%; transition-duration: @(totpConfig.RemainingSeconds < 0.25d || totpConfig.RemainingSeconds > ((double)totpConfig.Period - 0.25d) ? "0.00s" : "0.25s");">
                </div>

            </div>
        </div>
    </div>
}

<!-- Manual 2FA registration modal -->
<div class="modal fade"
     id="@Constants.ElementIds.REGISTER_TOTP_SECRET_MODAL"
     tabindex="-1"
     aria-labelledby="@Constants.ElementIds.REGISTER_TOTP_SECRET_MODAL_LABEL"
     aria-hidden="true">

<div class="modal-dialog">

<div class="modal-content">

    <div class="modal-header">

        <h5 class="modal-title"
            id="@Constants.ElementIds.REGISTER_TOTP_SECRET_MODAL_LABEL">
            Manually enter a 2FA secret
        </h5>

        <button type="button"
                class="btn-close"
                data-bs-dismiss="modal"
                aria-label="Close">
        </button>
    </div>

    <div class="modal-body">

        <p>
            Manually add a 2FA secret to your TFACGUI chain by compiling the form below.
            <span style="cursor: help"
                  title="@manualRegistrationDescTooltip"
                  onclick="alert('@manualRegistrationDescTooltip.Replace("\n", "\\n")')">
                ❓
            </span>
        </p>

        <div class="form-group">

            <label for="@Constants.ElementIds.TOTP_CONFIG_ENTRY_NAME"
                   class="form-label mt-2">
                Name
            </label>

            <input type="text"
                   minlength="2"
                   maxlength="32"
                   class="form-control"
                   id="@Constants.ElementIds.TOTP_CONFIG_ENTRY_NAME"
                   placeholder="@("Enter a recognizable name (e.g. \"Google Main Account\")")"
                   @oninput="CheckManualRegistrationReady"
                   autocomplete="off">
        </div>

        <div class="form-group">

            <label for="@Constants.ElementIds.TOTP_ISSUER"
                   class="form-label mt-2">
                Issued by
            </label>

            <input type="text"
                   maxlength="1024"
                   class="form-control"
                   id="@Constants.ElementIds.TOTP_ISSUER"
                   placeholder="@("Where this 2FA secret comes from (e.g. \"example.com\")")"
                   @oninput="CheckManualRegistrationReady"
                   autocomplete="off">
        </div>

        <div class="form-group">

            <label for="@Constants.ElementIds.TOTP_ISSUED_TO"
                   class="form-label mt-2">
                Issued to
            </label>

            <input type="text"
                   maxlength="64"
                   class="form-control"
                   id="@Constants.ElementIds.TOTP_ISSUED_TO"
                   placeholder="@("Your account username, user id, email or whatever")"
                   @oninput="CheckManualRegistrationReady"
                   autocomplete="off">
        </div>

        <div class="form-group">

            <label for="@Constants.ElementIds.TOTP_SECRET"
                   class="form-label mt-2">
                2FA Secret
            </label>

            <input type="password"
                   class="form-control"
                   id="@Constants.ElementIds.TOTP_SECRET"
                   placeholder="Base32-encoded TOTP secret key"
                   @oninput="CheckManualRegistrationReady"
                   onClick="this.select();"
                   autocomplete="off">
        </div>

        <fieldset class="form-group">

            <label class="form-label mt-2"
                   id="@Constants.ElementIds.TOTP_DIGITS_SLIDER_LABEL"
                   for="@Constants.ElementIds.TOTP_DIGITS_SLIDER">
                Digits: @TotpConfig.Empty.Digits
            </label>

            <input type="range"
                   class="form-range"
                   min="1"
                   max="10"
                   step="1.0"
                   value="@TotpConfig.Empty.Digits"
                   @oninput="OnMoveDigitSlider"
                   id="@Constants.ElementIds.TOTP_DIGITS_SLIDER">
        </fieldset>

        <fieldset class="form-group">

            <label class="form-label mt-2"
                   id="@Constants.ElementIds.TOTP_INTERVAL_SLIDER_LABEL"
                   for="@Constants.ElementIds.TOTP_INTERVAL_SLIDER">
                Interval: @TotpConfig.Empty.Period seconds
            </label>

            <input type="range"
                   class="form-range"
                   min="1"
                   max="60"
                   step="1.0"
                   value="@TotpConfig.Empty.Period"
                   @oninput="OnMoveIntervalSlider"
                   id="@Constants.ElementIds.TOTP_INTERVAL_SLIDER">
        </fieldset>

        <fieldset class="form-group">

            <label class="form-label mt-2">
                Algorithm
            </label>

            <div class="form-check">

                <input class="form-check-input"
                       type="radio"
                       name="@Constants.ElementIds.TOTP_ALGO_RADIO_BOX"
                       id="@Constants.ElementIds.TOTP_ALGO_RADIO_BOX_BUTTON_SHA1"
                       value="@((int)OtpHashMode.Sha1)"
                       checked>

                <label class="form-check-label"
                       for="@Constants.ElementIds.TOTP_ALGO_RADIO_BOX_BUTTON_SHA1">
                    SHA-1 (default)
                </label>
            </div>

            <div class="form-check">

                <input class="form-check-input"
                       type="radio"
                       name="@Constants.ElementIds.TOTP_ALGO_RADIO_BOX"
                       id="@Constants.ElementIds.TOTP_ALGO_RADIO_BOX_BUTTON_SHA256"
                       value="@((int)OtpHashMode.Sha256)">

                <label class="form-check-label"
                       for="@Constants.ElementIds.TOTP_ALGO_RADIO_BOX_BUTTON_SHA256">
                    SHA-256
                </label>
            </div>

            <div class="form-check">

                <input class="form-check-input"
                       type="radio"
                       name="@Constants.ElementIds.TOTP_ALGO_RADIO_BOX"
                       id="@Constants.ElementIds.TOTP_ALGO_RADIO_BOX_BUTTON_SHA512"
                       value="@((int)OtpHashMode.Sha512)">

                <label class="form-check-label"
                       for="@Constants.ElementIds.TOTP_ALGO_RADIO_BOX_BUTTON_SHA512">
                    SHA-512
                </label>
            </div>
        </fieldset>

        <br />

    </div>

    <div class="modal-footer">

        <button type="button"
                class="btn btn-secondary stretch-when-narrow"
                data-bs-dismiss="modal">
            Cancel
        </button>

        <button type="button"
                data-bs-dismiss="modal"
                class="btn btn-success stretch-when-narrow"
                disabled="@(!registrationReady)"
                @onclick="OnClickEnterManually">
            Add
        </button>
    </div>
</div>
</div>
</div>

@code {

    private bool registrationReady = false;

    private QRCodeScannerJsInterop? qrCodeScannerJsInterop;
    private Models.UserData userData = Models.UserData.Empty;

    private readonly string qrCodeScannerWidth = "512";
    private readonly string manualRegistrationDescTooltip = "Manually registering a 2FA secret is useful for example if your device has no camera to scan the QR code with, or if you want more control over how the entry is going to be labelled inside your TFACGUI chain.\n\nMake sure to enter everything correctly and label everything in an easily recognizable fashion!";

    protected override async Task OnInitializedAsync()
    {
        qrCodeScannerJsInterop = new QRCodeScannerJsInterop(JS);

        userData = await UserDataService.GetUserData();

        for (;;)
        {
            StateHasChanged();

            await Task.Delay(128);
        }
    }

    private async Task ResetManualRegistrationModalForm()
    {
        await JS.InvokeVoidAsync(Constants.InteropFunctionNames.SET_INPUT_VALUE, Constants.ElementIds.TOTP_CONFIG_ENTRY_NAME, string.Empty);
        await JS.InvokeVoidAsync(Constants.InteropFunctionNames.SET_INPUT_VALUE, Constants.ElementIds.TOTP_SECRET, string.Empty);
        await JS.InvokeVoidAsync(Constants.InteropFunctionNames.SET_INPUT_VALUE, Constants.ElementIds.TOTP_ISSUER, string.Empty);
        await JS.InvokeVoidAsync(Constants.InteropFunctionNames.SET_INPUT_VALUE, Constants.ElementIds.TOTP_ISSUED_TO, string.Empty);
        await JS.InvokeVoidAsync(Constants.InteropFunctionNames.SET_INPUT_VALUE, Constants.ElementIds.TOTP_DIGITS_SLIDER, TotpConfig.Empty.Digits);
        await JS.InvokeVoidAsync(Constants.InteropFunctionNames.SET_INPUT_VALUE, Constants.ElementIds.TOTP_INTERVAL_SLIDER, TotpConfig.Empty.Period);
        await JS.InvokeVoidAsync(Constants.InteropFunctionNames.SET_INPUT_VALUE_RADIO_BOX, Constants.ElementIds.TOTP_ALGO_RADIO_BOX, (int)TotpConfig.Empty.Algorithm);
        await OnMoveDigitSlider(new ChangeEventArgs { Value = TotpConfig.Empty.Digits });
        await OnMoveIntervalSlider(new ChangeEventArgs { Value = TotpConfig.Empty.Period });
    }

    private async Task OnMoveDigitSlider(ChangeEventArgs e)
    {
        await JS.InvokeVoidAsync(Constants.InteropFunctionNames.SET_INPUT_VALUE, Constants.ElementIds.TOTP_DIGITS_SLIDER_LABEL, $"Digits: {e.Value}", true);
    }

    private async Task OnMoveIntervalSlider(ChangeEventArgs e)
    {
        await JS.InvokeVoidAsync(Constants.InteropFunctionNames.SET_INPUT_VALUE, Constants.ElementIds.TOTP_INTERVAL_SLIDER_LABEL, $"Interval: {e.Value} second{(e.Value is "1" ? string.Empty : "s")}", true);
    }

    private async Task OnClickCopyTOTP(TotpConfig totpConfig)
    {
        await JS.InvokeVoidAsync(Constants.InteropFunctionNames.COPY_TO_CLIPBOARD, totpConfig.TotpRaw);

        await JS.InvokeVoidAsync(Constants.InteropFunctionNames.PRESS_COPY_BUTTON_PORTABLE, totpConfig.Id, "\u2705Copied...", totpConfig.Totp);

        // TODO: animate the card here (something flashy?)
    }

    private async Task OnClickScanTotpSecret()
    {
        if (qrCodeScannerJsInterop is null)
        {
            return;
        }

        await qrCodeScannerJsInterop.Init(OnQrCodeScan);
    }

    private async Task OnClickEditConfig(TotpConfig config)
    {
        // TODO: impl.
    }

    private void OnQrCodeScan(string qrCodeContent)
    {
#if DEBUG
        Console.WriteLine($"Scanned QR-Code: \"{qrCodeContent}\"");
#endif

        // TODO: show dialog here and handle otp auth url!

        qrCodeScannerJsInterop?.StopRecording().GetAwaiter().GetResult();
    }

    private async Task OnClickEnterManually()
    {
        string totpConfigName = await JS.InvokeAsync<string>(Constants.InteropFunctionNames.GET_INPUT_VALUE, Constants.ElementIds.TOTP_CONFIG_ENTRY_NAME, "(Unnamed)");

        string totpIssuedTo = await JS.InvokeAsync<string>(Constants.InteropFunctionNames.GET_INPUT_VALUE, Constants.ElementIds.TOTP_ISSUED_TO, string.Empty);
        string totpIssuedBy = await JS.InvokeAsync<string>(Constants.InteropFunctionNames.GET_INPUT_VALUE, Constants.ElementIds.TOTP_ISSUER, string.Empty);
        string totpSecret = await JS.InvokeAsync<string>(Constants.InteropFunctionNames.GET_INPUT_VALUE, Constants.ElementIds.TOTP_SECRET, string.Empty);
        string totpDigits = await JS.InvokeAsync<string>(Constants.InteropFunctionNames.GET_INPUT_VALUE, Constants.ElementIds.TOTP_DIGITS_SLIDER, TotpConfig.Empty.Digits);
        string totpPeriod = await JS.InvokeAsync<string>(Constants.InteropFunctionNames.GET_INPUT_VALUE, Constants.ElementIds.TOTP_INTERVAL_SLIDER, TotpConfig.Empty.Period);
        string totpAlgo = await JS.InvokeAsync<string>(Constants.InteropFunctionNames.GET_INPUT_VALUE_RADIO_BOX, Constants.ElementIds.TOTP_ALGO_RADIO_BOX, (int)TotpConfig.Empty.Algorithm);

        bool validBase32;

        try
        {
            byte[] totpSecretBase32Decoded = Base32Encoding.ToBytes(totpSecret);

            validBase32 = totpSecretBase32Decoded.NotNullNotEmpty();
        }
        catch
        {
            validBase32 = false;
        }

        if (!validBase32)
        {
            await JS.InvokeVoidAsync(Constants.InteropFunctionNames.ALERT_DIALOG, "ERROR: Invalid 2FA secret. Please enter a valid, Base32-encoded 2FA secret!");

            return;
        }

        userData.Chain.Add(new TotpConfig
        {
            Name = totpConfigName,
            TotpSecretKey = totpSecret,
            Digits = int.TryParse(totpDigits, out int totpDigitsInt) ? totpDigitsInt : TotpConfig.Empty.Digits,
            Period = int.TryParse(totpPeriod, out int totpPeriodInt) ? totpPeriodInt : TotpConfig.Empty.Period,
            Algorithm = int.TryParse(totpAlgo, out int totpAlgoIndex) ? (OtpHashMode)totpAlgoIndex : TotpConfig.Empty.Algorithm,
            Issuer = totpIssuedBy.NullOrEmpty() ? string.Empty : totpIssuedBy,
            Label = totpIssuedTo.NotNullNotEmpty() && totpIssuedBy.NotNullNotEmpty() ? $"{totpIssuedTo}:{totpIssuedBy}" : string.Empty
        });

        await UserDataService.SetUserData(userData);

        StateHasChanged();
    }

    private async Task CheckManualRegistrationReady()
    {
        string totpSecret = await JS.InvokeAsync<string>(Constants.InteropFunctionNames.GET_INPUT_VALUE, Constants.ElementIds.TOTP_SECRET, string.Empty);
        string totpConfigEntryName = await JS.InvokeAsync<string>(Constants.InteropFunctionNames.GET_INPUT_VALUE, Constants.ElementIds.TOTP_CONFIG_ENTRY_NAME, string.Empty);

        registrationReady =
            totpSecret.NotNullNotEmpty()
            &&
            totpConfigEntryName.NotNullNotEmpty();
    }

}